// NetPulse/Models/DeviceStatus.swift
//  Copyright ¬© 2025 ykreo. All rights reserved.
import SwiftUI

struct DeviceStatus {
    enum State {
        case online, offline, unknown
    }

    var state: State = .unknown
    var latency: Double? // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º—Å

    // –¶–≤–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    var displayColor: Color {
        switch state {
        case .online: return .green
        case .offline: return .red
        case .unknown: return .gray
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é
    func displayName(for device: String) -> String {
        let icon: String
        switch state {
        case .online: icon = "üü¢"
        case .offline: icon = "üî¥"
        case .unknown: icon = "‚ö´Ô∏è"
        }

        if let latency = latency, state == .online {
            return "\(icon) \(device): –û–Ω–ª–∞–π–Ω (\(String(format: "%.0f", latency))ms)"
        } else {
            let statusText: String
            switch state {
            case .online: statusText = "–û–Ω–ª–∞–π–Ω"
            case .offline: statusText = "–û—Ñ–ª–∞–π–Ω"
            case .unknown: statusText = "–ü—Ä–æ–≤–µ—Ä–∫–∞..."
            }
            return "\(icon) \(device): \(statusText)"
        }
    }
}
extension DeviceStatus.State {
    var iconName: String {
        switch self {
        case .online: return "wifi"
        case .offline: return "wifi.slash"
        case .unknown: return "wifi.exclamationmark"
        }
    }
    
    var displayName: String {
        switch self {
        case .online: return "–û–Ω–ª–∞–π–Ω"
        case .offline: return "–û—Ñ–ª–∞–π–Ω"
        case .unknown: return "–ü—Ä–æ–≤–µ—Ä–∫–∞..."
        }
    }
}
